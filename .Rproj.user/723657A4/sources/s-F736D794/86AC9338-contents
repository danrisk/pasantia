# Make sure a package is at least some version (only installs from CRAN)
ensure_version <- function(pkg, ver = "0.0") {
  if (system.file(package = pkg)  == "" || packageVersion(pkg) < ver)
    install.packages(pkg)
}

ensure_version("shiny", "1.0.3")
ensure_version("shinydashboard", "0.5.3")
ensure_version("shinythemes", "1.1.1")
ensure_version("shinyjs", "0.9.1")
ensure_version("rriskDistributions", "2.1.2")
ensure_version("DT", "0.2")
ensure_version("VaRES", "1.0")
ensure_version("rmarkdown", "1.6")
ensure_version("dygraphs", "1.1.1.4")
ensure_version("readr", "1.0.0")
ensure_version("webshot", "0.4.0")
ensure_version("rintrojs", "0.1.2")
ensure_version("highcharter", "0.5.0")
#ensure_version("GARPFRM")

library(shiny)
library(shinydashboard)
library(shinythemes)
library(shinyjs)
library(rriskDistributions)
library(DT)
library(VaRES)
library(rmarkdown)
library(dygraphs)
library(readr)
library(webshot)
library(rintrojs)
library(highcharter)
#library(GARPFRM)

source("text.R")
source("conf.R")
source("ui.R")

server<- shinyServer(function(input, output){

  data <- reactive({
    # input$file1 will be NULL initially. After the user selects
    # and uploads a file, it will be a data frame with 'name',
    # 'size', 'type', and 'datapath' columns. The 'datapath'
    # column will contain the local filenames where the data can
    # be found.

    inFile <- input$file_data

    if (is.null(inFile))
      return(NULL)

    read.table(inFile$datapath, header = input$header,
               sep = input$sep, quote = input$quote)
  })

###############################################################################
###############################################################################
#################################    Datos    #################################
###############################################################################
###############################################################################

    output$datatable<-renderDataTable({
    if(is.null(data())){return()}
    datatable(data()) %>% formatCurrency(1:3, 'Bs. ', mark = '.', dec.mark = ',')
  })

###############################################################################
###############################################################################
##############################   Estadística    ###############################
###############################################################################
###############################################################################

  ##Rendimiento
  output$rendimientos<-renderDataTable({
    if(is.null(data())){return()}
    AHORRO <- as.data.frame(diff(log((data()$ahorro))), optional = TRUE)
    CORRIENTE <- as.data.frame(diff(log((data()$corriente))), optional = TRUE)
    CORRIENTE_REM <- as.data.frame(diff(log((data()$corriente.rem))), optional = TRUE)
    datatable(cbind(AHORRO, CORRIENTE, CORRIENTE_REM, deparse.level = 1)) %>% formatCurrency(1:3, currency = '', mark = '.', dec.mark = ',', digits = 8)
  })
  ##Frecuencias
  output$frecuencia <- renderDataTable({
    if(is.null(data())){return()}
    AHORRO.f <- as.data.frame(table(diff(log(data()$ahorro))), optional = TRUE)
    CORRIENTE.f <- as.data.frame(table(diff(log(data()$corriente))), optional = TRUE)
    CORRIENTE_REM.f <- as.data.frame(table(diff(log(data()$corriente.rem))), optional = TRUE)
    datatable(rbind(AHORRO.f, CORRIENTE.f, CORRIENTE_REM.f)) %>% formatCurrency(1:3, currency = '', mark = '.', dec.mark = ',', digits = 8)
  })
  ##Estadísticos Básicos
  ###1)
  output$estadisticas1 <- renderDataTable({
    if(is.null(data())){return()}
    Ahorro <-summary(data()$ahorro)
    Corriente <- summary(data()$corriente)
    Cte.remunerada <- summary(data()$corriente.rem)
    datatable(cbind(Ahorro, Corriente, Cte.remunerada, deparse.level = 1),
              options = list(dom = 't')) %>% formatCurrency(1:3, 'Bs. ', mark = '.', dec.mark = ',')
  })
  ###2)
  output$estadisticas2 <- renderDataTable({
    if(is.null(data())){return()}
    Ahorro <-summary(diff(log(data()$ahorro)))
    Corriente <- summary(diff(log(data()$corriente)))
    Cte.remunerada <- summary(diff(log(data()$corriente.rem)))
    datatable(cbind(Ahorro, Corriente, Cte.remunerada, deparse.level = 1), options = list(dom = 't'))
  }
  )

###############################################################################
###############################################################################
################################    Análisis    ###############################
###############################################################################
###############################################################################

 ##Funciones para simplificar
  #Calcula el log() y diff()
  difflog<-function(data) {
    diff(log(data))
  }
  #Calcula el log() diff() y useFitdist()
  uFitdifflog<-function(data) {
    useFitdist(diff(log(data)))
  }


 ##Matriz con resultados de pruebas
  ##Cuentas de Ahorro
  output$matrix1 <- renderTable({
    if(is.null(data())){return()}
    AHORRO.BA <-uFitdifflog(data()$ahorro)
    AHORRO.BA$res.matrix
  },
  rownames = TRUE, striped = TRUE,
  hover = TRUE, bordered = TRUE
  )
  ##Cuentas Corrientes
  output$matrix2 <- renderTable({
    if(is.null(data())){return()}
    CORRIENTE.BA <-uFitdifflog(data()$corriente)
    CORRIENTE.BA$res.matrix
  },
  rownames = TRUE, striped = TRUE,
  hover = TRUE, bordered = TRUE
  )
  ##Cuenta Corriente Remunerada
  output$matrix3 <- renderTable({
    if(is.null(data())){return()}
    CORRIENTE.REM.BA <-uFitdifflog(data()$corriente.rem)
    CORRIENTE.REM.BA$res.matrix
  },
  rownames = TRUE, striped = TRUE,
  hover = TRUE, bordered = TRUE
  )

  #Caja con parámetros de distribución
  distBox<-function(label1, out1, label2, out2) {
    box( width = 6, status ="success",
         h5(label1), out1,
         h5(label2), out2
    )
  }

  #Nombre de parámetros con valores de dichos parámetros
  distParams<-function(condition, data) {
    v<-switch(condition,
              "Normal"=c(NLABEL1,mediaNormal(data),NLABEL2,sdNormal(data)),
              "Exponential"=c(ELABEL1,lambdaExponential(data), NULL, NULL),
              "Cauchy"=c(CLABEL1,muCauchy(data),CLABEL2,thetaCauchy(data)),
              "Logistic"=c(LLABEL1,s1Logistic(data),LLABEL2,s2Logistic(data)),
              "Beta"=c(BLABEL1,s1Beta(data),BLABEL2,s2Beta(data)),
              "Chi-square"=c(CCLABEL,dfChisquare(data), NULL, NULL),
              "Uniform"=c(ULABEL1,minUniform(data),ULABEL2,maxUniform(data)),
              "Gamma"=c(GLABEL1,mGamma(data),GLABEL2,lambdaGamma(data)),
              "Lognormal"=c(LNLABEL1,mediaLognormal(data),LNLABEL2,sdLognormal(data)),
              "Weibull"=c(WLABEL1,s1Weibull(data),WLABEL2,s2Weibull(data)),
              "F"=c(FLABEL1,df1F(data),FLABEL2,df2F(data)),
              "Student"=c(TLABEL1,dfStudent(data), NULL, NULL),
              "Gompertz"=c(GOLABEL1,s1Gompertz(data),GOLABEL2,s2Gompertz(data))
    )
  }

 ##Selección de Distribución
  ##Cuenta de Ahorro
  selecdistributionA<- reactive ({
    v<-distParams(input$distsA, data()$ahorro)
    distBox(v[1],v[2],v[3],v[4])
  })
  ##Cuenta Corriente
  selecdistributionC<- reactive ({
    v<-distParams(input$distsC, data()$corriente)
    distBox(v[1],v[2],v[3],v[4])
  })
  ##Cuenta Corriente Remunerada
  selecdistributionCR<- reactive ({
    v<-distParams(input$distsCR, data()$corriente.rem)
    distBox(v[1],v[2],v[3],v[4])
  })

 ##Output parámetros de las distribuciones
  ##Cuenta de Ahorro
  output$paramA<-renderUI({
    if(is.null(data())){return()}
    selecdistributionA()
  })
  ##Cuenta Corriente
  output$paramC<-renderUI({
    if(is.null(data())){return()}
    selecdistributionC()
  })
  ##Cuenta Corriente Remunerada
  output$paramCR<-renderUI({
    if(is.null(data())){return()}
    selecdistributionCR()
  })

 ##Funciones para calcular parámetros de las distribuciones
  ##Normal
  mediaNormal <- function(data)
    { uFitdifflog(data)$fit.list$Normal$estimate[1] }
  sdNormal <- function(data)
    { uFitdifflog(data)$fit.list$Normal$estimate[2] }
  ##Esponencial
  lambdaExponential <- function(data)
    { uFitdifflog(data)$fit.list$Exponential$estimate[1]}
  ##Logistica
  s1Logistic <- function(data)
    { uFitdifflog(data)$fit.list$Logistic$estimate[1] }
  s2Logistic <- function(data)
    { uFitdifflog(data)$fit.list$Logistic$estimate[2] }
  ##Cauchy
  muCauchy <- function(data)
    { uFitdifflog(data)$fit.list$Cauchy$estimate[1] }
  thetaCauchy <- function(data)
    { uFitdifflog(data)$fit.list$Cauchy$estimate[2] }
  ##Beta
  s1Beta <- function(data)
    { uFitdifflog(data)$fit.list$Beta$estimate[1] }
  s2Beta <- function(data)
    { uFitdifflog(data)$fit.list$Beta$estimate[2] }
  ##Chi Cuadrado
  dfChisquare <- function(data)
    { uFitdifflog(data)$fit.list$`Chi-square`$estimate[1] }
  ##Uniforme
  minUniform <- function(data)
    { uFitdifflog(data)$fit.list$Uniform$estimate[1] }
  maxUniform <- function(data)
    { uFitdifflog(data)$fit.list$Uniform$estimate[2] }
  ##Gamma
  mGamma <- function(data)
    { uFitdifflog(data)$fit.list$Gamma$estimate[1] }
  lambdaGamma <- function(data)
    { uFitdifflog(data)$fit.list$Gamma$estimate[2] }
  ##Lognormal
  mediaLognormal <- function(data)
    { uFitdifflog(data)$fit.list$Lognormal$estimate[1] }
  sdLognormal <- function(data)
    { uFitdifflog(data)$fit.list$Lognormal$estimate[2] }
  ##Weibull
  s1Weibull <- function(data)
    { uFitdifflog(data)$fit.list$Weibull$estimate[1] }
  s2Weibull <- function(data)
    { uFitdifflog(data)$fit.list$Weibull$estimate[2] }
  ##Fisher
  df1F <- function(data)
    { uFitdifflog(data)$fit.list$F$estimate[1] }
  df2F <- function(data)
    { uFitdifflog(data)$fit.list$F$estimate[2] }
  ##T-student
  dfStudent <- function(data)
    { uFitdifflog(data)$fit.list$Student$estimate[1] }
  ##Gompertz
  s1Gompertz <- function(data)
    { uFitdifflog(data)$fit.list$Gompertz$estimate[1] }
  s2Gompertz <- function(data)
    { uFitdifflog(data)$fit.list$Gompertz$estimate[2] }

###Gráficos en Análisis
 ##Función para gráficar el histograma con la curva aproximada
  Curdist<-function(data,condition,title ) {

    hdata <- cbind(hist(difflog(data), plot = F, breaks = "Scott")$breaks[-1],
                   hist(difflog(data), plot = F, breaks ="Scott")$count)
     distribucion <- switch(condition,
                     "Normal" = density(qnorm(p = x, mean = as.numeric(uFitdifflog(data)$fit.list$Normal$estimate[1]), sd = as.numeric(uFitdifflog(data)$fit.list$Normal$estimate[2]))),
                     "Exponential"=density(qexp(p = x, rate=as.numeric(uFitdifflog(data)$fit.list$Exponential$estimate[1]))),
                     "Cauchy"=density(qcauchy(p = x,location=as.numeric(uFitdifflog(data)$fit.list$Cauchy$estimate[1]), scale = as.numeric(uFitdifflog(data)$fit.list$Cauchy$estimate[2]))),
                     "Logistic"=density(qlogis(p = x,location=as.numeric(uFitdifflog(data)$fit.list$Logistic$estimate[1]), scale = as.numeric(uFitdifflog(data)$fit.list$Logistic$estimate[2]))),
                     "Beta"=density(qbeta(p = x,shape1=as.numeric(uFitdifflog(data)$fit.list$Beta$estimate[1]), shape2 = as.numeric(uFitdifflog(data)$fit.list$Beta$estimate[2]))),
                     "Chi-square"=density(qchisq(p = x,df=as.numeric(uFitdifflog(data)$fit.list$`Chi-square`$estimate[1]))),
                     "Uniform"=density(qunif(p = x,min=as.numeric(uFitdifflog(data)$fit.list$Uniform$estimate[1]), max = as.numeric(uFitdifflog(data)$fit.list$Uniform$estimate[2]))),
                     "Gamma"=density(qgamma(p = x,min=as.numeric(uFitdifflog(data)$fit.list$Gamma$estimate[1]), max = as.numeric(uFitdifflog(data)$fit.list$Gamma$estimate[2]))),
                     "Lognormal"=density(qlnorm(p = x,meanlog=as.numeric(uFitdifflog(data)$fit.list$Lognormal$estimate[1]), sdlog = as.numeric(uFitdifflog(data)$fit.list$Lognormal$estimate[2]))),
                     "Weibull"=density(qweibull(p = x,shape=as.numeric(uFitdifflog(data)$fit.list$Weibull$estimate[1]), scale = as.numeric(uFitdifflog(data)$fit.list$Weibull$estimate[2]))),
                     "F"=density(qf(p = x,df1= as.numeric(uFitdifflog(data)$fit.list$F$estimate[1]), df2 = as.numeric(uFitdifflog(data)$fit.list$F$estimate[2]))),
                     "Student"=density(qt(p = x,df= as.numeric(uFitdifflog(data)$fit.list$Uniform$estimate[1]))),
                     "Gompertz"=density(qgompertz(p = x,b=as.numeric(uFitdifflog(data)$fit.list$Gompertz$estimate[1]), eta=as.numeric(uFitdifflog(data)$fit.list$Gompertz$estimate[2])))
    )

     hc <- highchart() %>%
      hc_chart(
        borderColor = "",
        borderRadius = 10,
        borderWidth = 2,
        backgroundColor = list(
          linearGradient = c(0, 0, 500, 500),
          stops = list(
            list(0, 'rgb(255, 255, 255)'),
            list(1, 'rgb(200, 200, 255)')
          ))) %>%
       hc_add_series(data = hdata, type = "column", groupPadding= -.1 , pointPadding = 0.15,
                     pointRange = 0.01, borderColor = "white", borderWidth = 2,
                     color ="#FF7F00",  name = "Rendimientos Empíricos") %>%
      hc_add_series(distribucion,
                    type ="spline", lineWidth = 2, color = "#131F45",
                    name = HISTEJEY_TEXT) %>%
      hc_title(text = paste(HISTTITLE_TEXT, title)) %>%
      hc_credits(enabled = TRUE, text = "Vision® RISK")
  }

 ##Función para gráficar el qqnorm con qqline
  QQnorm<-function(data,condition,title ) {

    switch( condition,
            "Normal"= qqline(data, distribution = qnorm, col="blue", lwd = 3),
            "Exponential"= qqline(data, distribution = qexp, col="blue", lwd = 3),
            "Cauchy"=qqline(data, distribution = qcauchy, col="blue", lwd = 3),
            "Logistic"=qqline(data, distribution = qlogis, col="blue", lwd = 3),
            "Beta"=qqline(data, distribution = qbeta, col="blue", lwd = 3),
            "Chi-square"=qqline(data, distribution = function(p) qchisq(p, df = as.numeric(useFitdist(data)$fit.list$`Chi-square`$estimate[1])), col="blue", lwd = 3),
            "Uniform"=qqline(data, distribution = qunif, col="blue", lwd = 3),
            "Gamma"=qqline(data, distribution = qgamma, col="blue", lwd = 3),
            "Lognormal"=qqline(data, distribution = qlnorm, col="blue", lwd = 3),
            "Weibull"=qqline(data, distribution = function(p) qweibull( p, shape = as.numeric(useFitdist(data)$fit.list$Weibull$estimate[1]), scale = as.numeric(useFitdist(data)$fit.list$Weibull$estimate[2])), col="blue", lwd = 3),
            "F"=qqline(data, distribution = qlnorm, col="blue", lwd = 3),
            "Student"=qqline(data, distribution = function(p) qt(p, df = as.numeric(useFitdist(data)$fit.list$Student$estimate[1])), col="blue", lwd = 3),
            "Gompertz"=qqline(data, distribution = qgompertz, col="blue", lwd = 3)
             )

    qqnorm(data, main = title, xlab = QQNORMEJEX_TEXT, ylab = QQNORMEJEY_TEXT)

    }

 ##Cuenta de Ahorro
  #Gráfico del Histograma
  output$hist1<-renderHighchart({
    if(is.null(data())){return()}
    Curdist(data()$ahorro,input$distsA,HISTATITLE_TEXT)
  })
  #Gráfico de Valores en serie
  output$histfreq1 <- renderHighchart({
    if(is.null(data())){return()}
    d.1000 <- data()$ahorro/1000000
    d.ts <- ts(d.1000)
    hc <- highchart() %>%
      hc_chart(
        borderColor = "",
        borderRadius = 10,
        borderWidth = 2,
        backgroundColor = list(
          linearGradient = c(0, 0, 500, 500),
          stops = list(
            list(0, 'rgb(255, 255, 255)'),
            list(1, 'rgb(200, 200, 255)')
          ))) %>%
      hc_add_series_ts(ts = d.ts, name = VALSERLABEL_TEX, color = "#FF7F00") %>%
      hc_title(text = VALSERATITLE_TEXT) %>%
      hc_credits(enabled = TRUE, text = "Vision® RISK")
  })
  #Gráfico de Rendimientos
  output$plot1 <- renderHighchart({
    if(is.null(data())){return()}
    d.log <- diff(log(data()$ahorro))
    d.log.ts <- ts(d.log)

    hc <- highchart() %>%
      hc_chart(
        borderColor = "",
        borderRadius = 10,
        borderWidth = 2,
        backgroundColor = list(
          linearGradient = c(0, 0, 500, 500),
          stops = list(
            list(0, 'rgb(255, 255, 255)'),
            list(1, 'rgb(200, 200, 255)')
          ))) %>%
      hc_add_series_ts(ts = d.log.ts, name = RENDLABEL_TEX, color = "#FF7F00") %>%
      hc_title(text = RENDATITLE_TEXT) %>%
      hc_credits(enabled = TRUE, text = "Vision® RISK")
  })
  #Gráfico de QQnorm
  output$qqnorm1 <- renderPlot({
    if(is.null(data())){return()}
    QQnorm(difflog(data()$ahorro),input$distsA,QQNORMATITLE_TEXT)
  })

 ##Cuenta Corriente
  #Gráfico del Histograma
  output$hist2<-renderHighchart({
    if(is.null(data())){return()}
    Curdist(data()$corriente,input$distsC,HISTCTITLE_TEXT)
  })
  #Gráfico de Valores en serie
  output$histfreq2 <- renderHighchart({
    if(is.null(data())){return()}
    C.1000 <- data()$corriente/1000000
    C.ts <- ts(C.1000)
    hc <- highchart() %>%
    hc_chart(
      borderColor = "",
      borderRadius = 10,
      borderWidth = 2,
      backgroundColor = list(
        linearGradient = c(0, 0, 500, 500),
        stops = list(
          list(0, 'rgb(255, 255, 255)'),
          list(1, 'rgb(200, 200, 255)')
        ))) %>%
      hc_add_series_ts(ts = C.ts, name = VALSERLABEL_TEX, color = "#FF7F00") %>%
      hc_title(text = VALSERCTITLE_TEXT) %>%
      hc_credits(enabled = TRUE, text = "Vision® RISK")

  })
  #Gráfico de Rendimientos
  output$plot2 <- renderDygraph({
    if(is.null(data())){return()}
    C.log <- diff(log(data()$corriente))
    C.log.ts <- ts(C.log)
    hc <- highchart() %>%
    hc_chart(
      borderColor = "",
      borderRadius = 10,
      borderWidth = 2,
      backgroundColor = list(
        linearGradient = c(0, 0, 500, 500),
        stops = list(
          list(0, 'rgb(255, 255, 255)'),
          list(1, 'rgb(200, 200, 255)')
        ))) %>%
      hc_add_series_ts(ts = C.log.ts, name = RENDLABEL_TEX, color = "#FF7F00") %>%
      hc_title(text = RENDCTITLE_TEXT) %>%
      hc_credits(enabled = TRUE, text = "Vision® RISK")
  })
  #Gráfico de QQnorm
  output$qqnorm2 <- renderPlot({
    if(is.null(data())){return()}
    QQnorm(difflog(data()$corriente),input$distsC,QQNORMCTITLE_TEXT)
  })

 ##Cuenta Corriente Remunerada
  #Gráfico del Histograma
  output$hist3<-renderHighchart({
    if(is.null(data())){return()}
    Curdist(data()$corriente.rem,input$distsCR,HISTCRTITLE_TEXT)
  })
  #Gráfico de Valores en serie
  output$histfreq3 <- renderHighchart({
    if(is.null(data())){return()}
    CR.1000 <- data()$corriente.rem/1000000
    CR.ts <- ts(CR.1000)
    hc <- highchart()%>%
    hc_chart(
      borderColor = "",
      borderRadius = 10,
      borderWidth = 2,
      backgroundColor = list(
        linearGradient = c(0, 0, 500, 500),
        stops = list(
          list(0, 'rgb(255, 255, 255)'),
          list(1, 'rgb(200, 200, 255)')
        ))) %>%
      hc_add_series_ts(ts = CR.ts, name = VALSERLABEL_TEX, color = "#FF7F00") %>%
      hc_title(text = VALSERCRTITLE_TEXT) %>%
      hc_credits(enabled = TRUE, text = "Vision® RISK")
  })
  #Gráfico de Rendimientos
  output$plot3 <- renderHighchart({
    if(is.null(data())){return()}
    CR.log <- diff(log(data()$corriente.rem))
    CR.log.ts <- ts(CR.log)
    hc <- highchart()%>%
    hc_chart(
      borderColor = "",
      borderRadius = 10,
      borderWidth = 2,
      backgroundColor = list(
        linearGradient = c(0, 0, 500, 500),
        stops = list(
          list(0, 'rgb(255, 255, 255)'),
          list(1, 'rgb(200, 200, 255)')
        ))) %>%
      hc_add_series_ts(ts = CR.log.ts, name = RENDLABEL_TEX, color = "#FF7F00") %>%
      hc_title(text = RENDCRTITLE_TEXT) %>%
      hc_credits(enabled = TRUE, text = "Vision® RISK")

  })
  #Gráfico de QQnorm
  output$qqnorm3 <- renderPlot({
    if(is.null(data())){return()}
    QQnorm(difflog(data()$corriente.rem),input$distsCR,QQNORMCRTITLE_TEXT)
  })

###############################################################################
###############################################################################
############################   Valor en Riesgo   ##############################
###############################################################################
###############################################################################

  ##Función para mostrar el VAR y VART en riesgo
  VarR<-function(p,data,condition) {
   switch(condition,
             "Normal"    =c(VARINNOR_TEXT,
                            varnormal(p, as.numeric(data$fit.list$Normal$estimate[1]),as.numeric(data$fit.list$Normal$estimate[2])),
                            VARTINNOR_TEXT,
                            esnormal(p, as.numeric(data$fit.list$Normal$estimate[1]),as.numeric(data$fit.list$Normal$estimate[2])) ) ,
             "Exponential" =c(VARINEXP_TEXT,
                            varexponential(p, as.numeric(data$fit.list$Exponential$estimate[1])),
                            VARTINEXP_TEXT,
                            esexponential(p, as.numeric(data$fit.list$Exponential$estimate[1])) ),
             "Cauchy"    =c(VARINCAU_TEXT,
                            varCauchy(p, as.numeric(data$fit.list$Cauchy$estimate[1]),as.numeric(data$fit.list$Cauchy$estimate[2])),
                            VARTINCAU_TEXT,
                            esCauchy(p, as.numeric(data$fit.list$Cauchy$estimate[1]),as.numeric(data$fit.list$Cauchy$estimate[2])) ),
             "Logistic"  =c(VARINLOG_TEXT,
                            varlogistic(p, as.numeric(data$fit.list$Logistic$estimate[1]),as.numeric(data$fit.list$Logistic$estimate[2])),
                            VARTINLOG_TEXT,
                            eslogistic(p, as.numeric(data$fit.list$Logistic$estimate[1]),as.numeric(data$fit.list$Logistic$estimate[2])) ),
             "Beta"      =c(VARINBET_TEXT,
                            NULL,
                            VARTINBET_TEXT,
                            NULL ),
             "Chi-square"=c(VARINCHC_TEXT,
                            NULL,
                            VARTINCHC_TEXT,
                            NULL),
             "Uniform"   =c(VARINUNF_TEXT,
                            varuniform(p, as.numeric(data$fit.list$Uniform$estimate[1]), as.numeric(data$fit.list$Uniform$estimate[2])),
                            VARTINUNF_TEXT,
                            esuniform(p, as.numeric(data$fit.list$Uniform$estimate[1]), as.numeric(data$fit.list$Uniform$estimate[2])) ),
             "Gamma"     =c(VARINGAM_TEXT,
                            varGamma(p, as.numeric(data$fit.list$Gamma$estimate[1]), as.numeric(data$fit.list$Gamma$estimate[2])),
                            VARTINGAM_TEXT,
                            esGamma(p, as.numeric(data$fit.list$Gamma$estimate[1]), as.numeric(data$fit.list$Gamma$estimate[2])) ),
             "Lognormal" =c(VARINLGN_TEXT,
                            varlognorm(p, as.numeric(data$fit.list$Lognormal$estimate[1]), as.numeric(data$fit.list$Lognormal$estimate[2])),
                            VARTINLGN_TEXT,
                            eslognorm(p, as.numeric(data$fit.list$Lognormal$estimate[1]), as.numeric(data$fit.list$Lognormal$estimate[2])) ),
             "Weibull"   =c(VARINWEI_TEXT,
                            varWeibull(p, as.numeric(data$fit.list$Weibull$estimate[1]),as.numeric(data$fit.list$Weibull$estimate[2])),
                            VARTINWEI_TEXT,
                            esWeibull(p, as.numeric(data$fit.list$Weibull$estimate[1]),as.numeric(data$fit.list$Weibull$estimate[2])) ),
             "F"         =c(VARINF_TEXT,
                            varF(p, as.numeric(data$fit.list$F$estimate[1]), as.numeric(data$fit.list$F$estimate[2])),
                            VARTINF_TEXT,
                            esF(p, as.numeric(data$fit.list$F$estimate[1]), as.numeric(data$fit.list$F$estimate[2])) ),
             "Student"   =c(VARINTST_TEXT,
                            varT(p, as.numeric(data$fit.list$Student$estimate[1])),
                            VARTINTST_TEXT,
                            esT(p, as.numeric(data$fit.list$Student$estimate[1])) ),
             "Gompertz"  =c(VARINGOM_TEXT,
                            NULL,
                            VARTINGOM_TEXT,
                            NULL)
    )
  }
  #Cuenta de Ahorro
  output$VaR.ahorro<-renderUI({
    if(is.null(data())){return()}
    v<-VarR(as.numeric(input$porVar),uFitdifflog(data()$ahorro),input$distVarA)
    box( width=12, status="success",
         withMathJax(v[1]), br(),
         withMathJax( sprintf("$$VaR_p(X) = %0.05s$$", v[2] ) ), br(),
         withMathJax(v[3]), br(),
         withMathJax( sprintf("$$TVaR_p(X) = %0.05s$$", v[4] ) )
    )
  })
  #Cuenta Corriente
  output$VaR.corriente<-renderUI({
    if(is.null(data())){return()}
    v<-VarR(as.numeric(input$porVar),uFitdifflog(data()$corriente),input$distVarC)
    box( width=12, status="success",
         withMathJax(v[1]), br(),
         withMathJax( sprintf("$$VaR_p(X) = %0.05s$$", v[2] ) ), br(),
         withMathJax(v[3]), br(),
         withMathJax( sprintf("$$TVaR_p(X) = %0.05s$$", v[4] ) )
    )
  })
  #Cuenta Corriente Remunerada
  output$VaR.corrienter<-renderUI({
    if(is.null(data())){return()}
    v<-VarR(as.numeric(input$porVar),uFitdifflog(data()$corriente.rem),input$distVarCR)
    box( width=12, status="success",
         withMathJax(v[1]), br(),
         withMathJax( sprintf("$$VaR_p(X) = %0.05s$$", v[2] ) ), br(),
         withMathJax(v[3]), br(),
         withMathJax( sprintf("$$TVaR_p(X) = %0.05s$$", v[4] ) )
    )
  })

###############################################################################
###############################################################################
############################   GAP de liquidez  ###############################
###############################################################################
###############################################################################

  # TipoCntDist<-function(condition){
  #   switch(condition,
  #          "ahorro"=input$distsA,
  #          "corriente"=input$distsC,
  #          "corriente.rem"=input$distsCR
  #   )
  # }
  # TipoCnt<-function(condition){
  #   switch(condition,
  #          "ahorro"=data()$ahorro,
  #          "corriente"=data()$corriente ,
  #          "corriente.rem"=data()$corriente.rem
  #   )
  # }

  prueba<-function(p,tc,dat,CUENTA){
     v<-as.numeric( VarR(p,uFitdifflog(dat),tc)[2] )

     tFilas <- length(as.vector(dat))

     VaR7   <- dat[tFilas]*v*sqrt(7)
     VaR15  <- dat[tFilas]*v*sqrt(15)  - VaR7
     VaR23  <- dat[tFilas]*v*sqrt(23)  - VaR15
     VaR30  <- dat[tFilas]*v*sqrt(30)  - VaR23
     VaR60  <- dat[tFilas]*v*sqrt(60)  - VaR30
     VaR90  <- dat[tFilas]*v*sqrt(90)  - VaR60
     VaR180 <- dat[tFilas]*v*sqrt(180) - VaR90
     VaR360 <- dat[tFilas]*v*sqrt(360) - VaR180
     VaR720 <- dat[tFilas]*v*sqrt(720) - VaR360

     cbind(CUENTA,VaR7, VaR15, VaR23, VaR30, VaR60, VaR90, VaR180, VaR360, VaR720)
  }

  output$matrix4 <- renderDataTable({
    if(is.null(data())){return()}

    A<-prueba(as.numeric(input$porVar), input$distsA, data()$ahorro, TABLETITLEA_TEXT)
    C<-prueba(as.numeric(input$porVar), input$distsC, data()$corriente, TABLETITLEC_TEXT)
    CR<-prueba(as.numeric(input$porVar), input$distsCR, data()$corriente.rem, TABLETITLECR_TEXT)

    datatable(TABLA.GAP <-t(rbind(A,C,CR)), options = list(dom = 't'))%>% formatCurrency(1:3, 'Bs. ', mark = '.', dec.mark = ',')
  })


###############################################################################
###############################################################################
#################################   INFORME   #################################
###############################################################################
###############################################################################

#Para mostrar lo nombres de usuario con clave y los trabajadores
  #output$pers<-renderPrint({ PERSONAMES_CONF })
  #output$serv<- renderPrint({SERVINAMES_CONF})

  output$report <- downloadHandler(
    filename = "reporte1.pdf",
    content = function(file) {
      tempReport <- file.path(tempdir(), "reporte1.Rmd")
      file.copy("reporte1.Rmd", tempReport, overwrite = TRUE)

      # Configuración de parámetros pasados a documento Rmd
      params <- list(data1 = data()$ahorro,
                     data2 = data()$corriente,
                     data3 = data()$corriente.rem,
                     dist1 = input$distVarA,
                     dist2 = input$distVarC,
                     dist3 = input$distVarCR,
                     pconf = input$porVar,
                     reali = input$reali,
                     revi = input$revi)

      # Knit the document, passing in the `params` list, and eval it in a
      # child of the global environment (this isolates the code in the document
      # from the code in this app).
      rmarkdown::render(tempReport, output_file = file,
                        params = params,
                        envir = new.env(parent = globalenv())
      )
    })

###############################################################################
###############################################################################
#################################   ACERCA    #################################
###############################################################################
###############################################################################

  output$acerca<-renderUI({
    box( width = 6, status="success",
         h3(ACERTITLE_TEXT),
         tags$hr(),
         h4(ACERVER_TEXT),br(),
         h4(ACERRIF_TEXT),br(),
         h4(ACERRS_TEXT),
         tags$hr(),
         tags$img(src="img/logo.png", width=100, align = "center"),br(),
         h5(ACERSUBSV_TEXT),br(),
         tagList(shiny::icon("map-marker"), ACERDIR_TEXT),br(),
         tagList(shiny::icon("phone"), ACERTLF_TEXT),br(),
         tagList(shiny::icon("envelope-o"), ACERCORR_TEXT)
    )
  })

################################## USUARIO Y CLAVE ##############################################
  PASSWORD <- data.frame(Brukernavn = "danrisk", Passord = "1234")
  Logged=FALSE

  USER <- reactiveValues(Logged = Logged)

  output$uiLogin <- renderUI({
    if (USER$Logged == FALSE) {
      wellPanel(
        textInput(width="90%","userName", USUAR_TEXT),
        passwordInput(width="60%", "passwd",CLAVE_TEX ),
        br(),
        actionButton("Login", "Enviar")
      )
    }
  })

  output$pass <- renderText({
    if (USER$Logged == FALSE) {
      if (!is.null(input$Login)) {
        if (input$Login > 0) {
          Username <- isolate(input$userName)
          Password <- isolate(input$passwd)
          Id.username <- which(PASSWORD$Brukernavn == Username)
          Id.password <- which(PASSWORD$Passord    == Password)
          if (length(Id.username) > 0 & length(Id.password) > 0) {
            if (Id.username == Id.password) {
              USER$Logged <- TRUE
            }
          } else  {
            "User name or password failed!"
          }
        }
      }
    }
  })

  garchModel <- reactive({
    model <- switch(input$stmodel,
                    "sGARCH" = "sGARCH",
                    "fGARCH" = "fGARCH",
                    "eGARCH" = "eGARCH",
                    "apARCH" = "apARCH",
                    "iGARCH" = "iGARCH",
                    "csGARCH" = "csGARCH"
    )

    # GARCH Order
    q <- input$q
    p <- input$p

    # ARMA Order
    ar <- input$ar
    ma <- input$ma

    # distribution
    dist <- switch(input$stdist,
                   "normal" = "norm",
                   "skew normal" = "snorm",
                   "student-t" = "std",
                   "skew-student" = "sstd",
                   "generalied error" = "ged",
                   "skew-generalied error" = "sged",
                   "normal inverse gaussian" = "nig",
                   "generalized hyperbolic" = "ghyp",
                   "Johnson's SU" = "jsu"
    )

    # outSample
    outSample <- input$outSample

    uvGARCH(R=R(), model=model, garchOrder=c(q,p), armaOrder=c(ar, ma),
            distribution=dist)
  })

  output$page<-renderUI({
    if(USER$Logged == FALSE) {
      bootstrapPage(
        tags$style("body {background: url(img/logogrande.png)  no-repeat center center fixed;
                    background-size: cover; filter:grayscale(100%);}"),
        h1(UCTITLE_TEXT,style = "font family:Lobster,cursive;
                                 color:white;
                                 text-align:center"),
        br(),
        fluidRow(
          column(6, align="center", offset = 4,
                  box(width = 8,
                      textOutput("pass"),
                      uiOutput("uiLogin")
                  )
          )
        )
      )
    }
    else{
      dashboardPage( header, menu, body , skin = "green")
    }
  })

  # u1<-function(){textOutput("pass"),uiOutput("uiLogin")}
  # u2<-function(){}
  # if (USER$Logged == FALSE) {
  #
  #   output$page <- renderUI({
  #     div(class="outer",do.call(bootstrapPage,c("",ui1())))
  #   })
  # }
  # if (USER$Logged == TRUE)
  # {
  #   output$page <- renderUI({
  #     div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Contratulations you got in!",ui2())))
  #   })
  #   print(ui)
  # }

})

shinyApp(ui=ui,server=server)




